[入门笔记] Github - 基于git的代码托管平台

[参考网页] https://zhuanlan.zhihu.com/p/437280775 
------------------------------------------------------------------------------
# 网页注册
[Username] X YZ
[Email]    xyz@abc.com
[Password] uvwxyz1234567890 

------------------------------------------------------------------------------
[Github连接设置]
# Git Base 设置 
ssh-keygen -t rsa -C "你的注册邮箱" # 在本地创建ssh key 

vi ~/.ssh/id_rsa.pub # 复制里面的key
打开网页登陆-右上角头像下拉-> settings SSH and GP Gkeys -> SSH keys 
将复制好的key添加进去，title自便

# 连接上github了
ssh -T git@github.com 

# 设置用于登陆远端服务器的邮箱和用户名
git config --global user.name "你的用户名"
git config --global user.email "你的注册邮箱"
------------------------------------------------------------------------------
[本地仓库] git维护的三棵"树"
working dir  - 工作目录，它持有实际文件
Index        - 缓存区域，临时保存你的改动
Head         - 指向最后一次提交的结果 

# 建立 GitHub 仓库
git commit -m # "更新的信息"  
git log # 查看日志


# 本地仓库(respository)创建和复制
mkdir respository-test
cd  respository-test 
git init      # 初始化仓库, On branch master 
echo "hello world" > helloworld.txt # 随意创建一个文件  
git status    # 检查仓库的状态, helloworld.txt没有被提交（红色的）
git add -A    # 添加此目录下所有文到缓存区（注意此时还没有实际改动）
git status    # 再次检查仓库的状态, helloworld.txt已被提交(绿色的)
git commit -m # 将改动提交到Head(此时仅在本地做了实际改动，远端仓库并没有影响)
git status    # 再次检查仓库的状态, 发现nothing to commit
echo "guyzastro 2020 " >> helloworld.txt # 修改创建的文件  
git status    # 再次检查仓库的状态, 发现modified:   helloworld.txt
git checkout -- helloworld.txt # 放弃修改

git clone /path/to/repository # 复制本地服务器上的仓库

###############################################################################
[实操1] 本地仓库和远端服务器仓库的创建、管理和相互推送

# 远端服务器仓库(respository)创建
  在网页上创建 create a new respository -> respository-test

# 本地仓库(respository)创建和复制
mkdir respository-test; cd respository-test/  # 创建并进入本地文件夹
git init                                      # 初始化一个空的本地仓
git status                                    # 检查仓库的状态

   # 也可以直接复制远端服务器上的仓库
   # git clone git@github.com:astroyzgu/guyzastro-web.git 


# 随意创建一个文件, 并最后提交, 设立分支branch1 
echo "h" > helloworld.txt                     # 随意创建一个文件  
git add helloworld.txt                        # 添加到缓存区
git commit -m 'change to: h '                 # 提交到Head
git branch branch1                            # 标记一个分支点branch1, -d为删除

# 随意修改一个文件, 并最后提交, 设立分支branch2 
echo "hello" > helloworld.txt                 # 随意修改一个文件  
git add helloworld.txt                        # 添加到缓存区
git commit -m 'change to: hello'              # 提交到Head
git branch branch2                            # 标记一个分支点branch2, -d为删除

# 再次随意修改一个文件, 并最后提交，默认分支名为master 
echo "hello world" > helloworld.txt           # 随意修改一个文件  
git add helloworld.txt                        # 添加到缓存区
git commit -m 'change to: hello world'        # 提交到Head

# 连接远端服务器，推送当前分支到远端服务器
git remote add origin git@github.com:astroyzgu/respository-test.git
git push -u origin master   # 将master 推送到远端仓库 
git push -u origin branch2  # 将branch2推送到远端仓库 
git push origin -d branch2  # 将远端仓库中的branch2删除 

git branch -a          # 查看所有分支, 标*为当前所在分支
git checkout <branch>  # 切换到<branch>这个分支



                                       ↗----> origin/Master [远程仓库]
                                      ↗ 
       ↗----> branch 1               ↗ push 
      ↗                             ↗                
----> modify 1 ----> modify 2 ----> modify 3 → branch Master [本地默认仓库] 
      h              hello        hello world 
                     ↘                  
                      ↘----> branch 2
############################################################################## 











############################################################################## 
[未整理]
git remote -v 

# Github安装和配置Git


「README」 是 markdown 格式文本，在 README.md 中可以查看项目的发起者对项目所作的图文说明

-- or create a new repository on the command line
echo "# test" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin git@github.com:astroyzgu/test.git
git push -u origin main

-- or push an existing repository from the command line
git remote add origin git@github.com:astroyzgu/test.git
git branch -M main
git push -u origin main


collaborate (see also: git help workflows)
fetch[拿来]    Download objects and refs from another repository
pull[拉来合并] Fetch and integrate with another repository or a local branch
push[推送]     Update remote refs along with associated objects

